---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_CLUSTER_DIR: "{{.BOOTSTRAP_DIR}}/talos/clusterconfig"
  TALHELPER_CONFIG_FILE: "{{.BOOTSTRAP_DIR}}/talos/talconfig.yaml"
  TALHELPER_SECRET_FILE: "{{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml"
  TALHELPER_PATCHES_DIR: "{{.BOOTSTRAP_DIR}}/talos/patches"
  GITHUB_PAT_FILE: "{{.BOOTSTRAP_DIR}}/argocd/github-pat.sops.yaml"

env:
  TALOSCONFIG: "{{.TALOSCONFIG}}"

tasks:
  generate-config:
    desc: Generate Talos configuration
    cmd: >
      talhelper genconfig   --config-file {{.TALHELPER_CONFIG_FILE}}   --secret-file {{.TALHELPER_SECRET_FILE}}  
      --out-dir {{.TALHELPER_CLUSTER_DIR}}
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [HOSTNAME=required]
    cmds:
      - task: generate-config
      - >
        talhelper gencommand apply   --node {{.HOSTNAME}}  --config-file {{.TALHELPER_CONFIG_FILE}}  
        --out-dir {{.TALHELPER_CLUSTER_DIR}}   --extra-flags="--insecure -p @{{.TALHELPER_PATCHES_DIR}}/tailscale.sops.yaml" 
        | bash
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      CLUSTER_NAME:
        sh: yq '.clusterName' {{.TALHELPER_CONFIG_FILE}}
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars:
        - HOSTNAME
    preconditions:
      - talosctl config info &>/dev/null
      - test -f {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  upgrade-node:
    desc: Upgrade Talos node with config [HOSTNAME=required]
    cmds:
      - task: generate-config
      - >
        talhelper gencommand upgrade  --node {{.HOSTNAME}}  --config-file {{.TALHELPER_CONFIG_FILE}}  
        --out-dir {{.TALHELPER_CLUSTER_DIR}}  | bash
      - talosctl health --server=false
    vars:
      CLUSTER_NAME:
        sh: yq '.clusterName' {{.TALHELPER_CONFIG_FILE}}
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars:
        - HOSTNAME
    preconditions:
      - talosctl config info &>/dev/null
      - test -f {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  reset:
    desc: Resets nodes back to maintenance mode
    prompt: This will destroy the cluster and reset the nodes back to maintenance mode... continue?
    cmd: >
      talhelper gencommand reset  --config-file {{.TALHELPER_CONFIG_FILE}}  --out-dir {{.TALHELPER_CLUSTER_DIR}} 
      --extra-flags="--reboot {{- if eq .CLI_FORCE false }}  --system-labels-to-wipe STATE  --system-labels-to-wipe
      EPHEMERAL{{ end }}  --graceful=false  --wait=false"  | bash
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - which talhelper

  bootstrap:
    desc: Bootstrap the Talos cluster
    cmds:
      - >
        talhelper genconfig   --config-file {{.TALHELPER_CONFIG_FILE}}   --secret-file {{.TALHELPER_SECRET_FILE}}  
        --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - >
        sops exec-file --no-fifo  --filename patch.yaml {{.TALHELPER_PATCHES_DIR}}/tailscale.sops.yaml 
        "talhelper gencommand apply  --config-file {{.TALHELPER_CONFIG_FILE}}  --out-dir {{.TALHELPER_CLUSTER_DIR}} 
        --extra-flags='--insecure'  --extra-flags='-p @{}' | bash"
      - >
        until talhelper gencommand bootstrap   --config-file {{.TALHELPER_CONFIG_FILE}}   --out-dir {{.TALHELPER_CLUSTER_DIR}} 
        | bash; do sleep 10; done
      - >
        until talhelper gencommand kubeconfig   --config-file {{.TALHELPER_CONFIG_FILE}}   --out-dir {{.TALHELPER_CLUSTER_DIR}}  
        --extra-flags="{{.ROOT_DIR}} --force"  | bash; do sleep 10; done
      - >
        until kubectl wait  --for=condition=Ready=False nodes  --all  --timeout=600s;  do sleep 10; done

      - task: cilium
      - talosctl health --server=false
      - task: argocd
    preconditions:
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.TALHELPER_SECRET_FILE}}
      - test -f {{.TALHELPER_PATCHES_DIR}}/tailscale.sops.yaml
      - which talhelper

  cilium:
    internal: true
    cmds:
      - >
        cilium install  --set ipam.mode=kubernetes  --set kubeProxyReplacement=true  --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" 
        --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}"  --set
        cgroup.autoMount.enabled=false  --set cgroup.hostRoot=/sys/fs/cgroup  --set k8sServiceHost=localhost 
        --set k8sServicePort=7445  --set socketLB.hostNamespaceOnly=true
      - cilium status --wait
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which cilium

  argocd:
    internal: true
    cmds:
      - kubectl create namespace argocd
      - kubectl create namespace sops-operator
      - kubectl annotate namespace/sops-operator argocd.argoproj.io/managed-by=argocd
      - kubectl create secret generic -n sops-operator sops-age-key --from-file={{.SOPS_AGE_KEY_FILE}}
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/refs/tags/v3.0.3/manifests/ha/install.yaml
    preconditions:
      - test -f {{.KUBECONFIG}}
